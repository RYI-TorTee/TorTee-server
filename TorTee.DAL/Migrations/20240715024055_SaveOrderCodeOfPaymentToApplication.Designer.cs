// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TorTee.DAL.DataContext;

#nullable disable

namespace TorTee.DAL.Migrations
{
    [DbContext(typeof(TorTeeDbContext))]
    [Migration("20240715024055_SaveOrderCodeOfPaymentToApplication")]
    partial class SaveOrderCodeOfPaymentToApplication
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.ApplicationQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationQuestion");

                    b.HasData(
                        new
                        {
                            Id = new Guid("219e217a-d39e-4ce3-bbe1-a42155e08dc6"),
                            Content = "What best describes the goal of your mentorship?"
                        },
                        new
                        {
                            Id = new Guid("d48c368b-8e56-406d-a256-86f4f2565c53"),
                            Content = "When would you like to reach that goal?"
                        },
                        new
                        {
                            Id = new Guid("06f21192-89fd-4268-86fb-50b3acf74bd4"),
                            Content = "Write a message to Mentor"
                        });
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenteeId");

                    b.HasIndex("MentorId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.AssignmentSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentOfMentor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Grade")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmitedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.ToTable("AssignmentSubmission");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.BookingCall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MenteeId");

                    b.HasIndex("SessionId");

                    b.ToTable("BookingCalls");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenteeApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Reply")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenteeApplicationId")
                        .IsUnique();

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteeApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppliedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FeedbackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenteePlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderCode")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MenteePlanId");

                    b.HasIndex("UserId");

                    b.ToTable("MenteeApplications");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteeApplicationAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenteeApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResponseContent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenteeApplicationId");

                    b.HasIndex("QuestionId");

                    b.ToTable("MenteeApplicationAnswers");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CallPerMonth")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionOfPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationOfMeeting")
                        .HasColumnType("int");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalSlot")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MentorId")
                        .IsUnique();

                    b.ToTable("MenteePlans");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MentorApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Achievement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AppliedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CallPerMonth")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionOfPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationOfMeeting")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalSlot")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MentorApplications");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MentorId")
                        .IsUnique();

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0ce685a7-b24c-4ef8-9127-c438406bb744"),
                            SkillName = "Project Management"
                        },
                        new
                        {
                            Id = new Guid("72c141a5-b4a9-4296-a3b1-1c6dcd5064b7"),
                            SkillName = "Software Development"
                        },
                        new
                        {
                            Id = new Guid("a8628e62-8605-4fea-af48-9215834b69c8"),
                            SkillName = "Data Analysis"
                        },
                        new
                        {
                            Id = new Guid("34a8ed3f-d4d3-44c7-b0be-d9bbb2ae1d0e"),
                            SkillName = "Digital Marketing"
                        },
                        new
                        {
                            Id = new Guid("fcf03cb5-3f0a-483e-8cce-51d2b0dd4085"),
                            SkillName = "Machine Learning"
                        },
                        new
                        {
                            Id = new Guid("1b421d7c-dbe7-4c5e-acc1-bf02dd56438f"),
                            SkillName = "Communication"
                        },
                        new
                        {
                            Id = new Guid("6e39f87a-0d68-4cb4-88d1-470c67064e5b"),
                            SkillName = "Team Leadership"
                        },
                        new
                        {
                            Id = new Guid("7e108e11-e395-4784-b3dc-6fb9b754905b"),
                            SkillName = "Problem Solving"
                        },
                        new
                        {
                            Id = new Guid("72ade5b0-b911-430e-9526-7d6e4a3ad758"),
                            SkillName = "Critical Thinking"
                        },
                        new
                        {
                            Id = new Guid("4e0e11a0-cea6-4737-b9fa-889224ed7897"),
                            SkillName = "Financial Analysis"
                        },
                        new
                        {
                            Id = new Guid("c377dff7-3ce4-43ae-b49d-ede3eafe5b11"),
                            SkillName = "Graphic Design"
                        },
                        new
                        {
                            Id = new Guid("1993505d-c822-4392-b72a-ff40688dd673"),
                            SkillName = "Customer Service"
                        },
                        new
                        {
                            Id = new Guid("7d9e635d-fd63-4af2-a3e0-bc56be1582c4"),
                            SkillName = "Sales"
                        },
                        new
                        {
                            Id = new Guid("18625b9a-5e66-4dec-9ff1-c78aab8f0f1d"),
                            SkillName = "Strategic Planning"
                        },
                        new
                        {
                            Id = new Guid("26297944-a37f-4f6e-9495-9ef34dcf795f"),
                            SkillName = "Web Development"
                        },
                        new
                        {
                            Id = new Guid("18167518-b1de-4c45-bc23-dc8a094eee8d"),
                            SkillName = "Mobile Development"
                        },
                        new
                        {
                            Id = new Guid("dbadcb41-80d3-4eeb-9e74-81f31354b655"),
                            SkillName = "Cloud Computing"
                        },
                        new
                        {
                            Id = new Guid("0848deee-8e54-4b76-a913-b0395e9f5572"),
                            SkillName = "Cybersecurity"
                        },
                        new
                        {
                            Id = new Guid("a95a666c-41f4-4bce-ac0f-c90e322d29fb"),
                            SkillName = "Database Management"
                        },
                        new
                        {
                            Id = new Guid("e8a137d1-14f3-4445-9f14-507e2cfa9caa"),
                            SkillName = "Network Administration"
                        },
                        new
                        {
                            Id = new Guid("22125c2a-d011-4361-85d3-a055536724e0"),
                            SkillName = "DevOps"
                        },
                        new
                        {
                            Id = new Guid("f403d3db-79be-443b-be5b-1caae100f135"),
                            SkillName = "Artificial Intelligence"
                        },
                        new
                        {
                            Id = new Guid("8d3bc614-b249-4e9a-9023-53afcac9d5a8"),
                            SkillName = "Blockchain"
                        },
                        new
                        {
                            Id = new Guid("a34aaae6-b255-4d67-aa52-35e98a7ab9b6"),
                            SkillName = "IT Support"
                        },
                        new
                        {
                            Id = new Guid("ace8ba9b-47b6-4d1d-acbc-038bc587c34e"),
                            SkillName = "Time Management"
                        },
                        new
                        {
                            Id = new Guid("3c782336-d9cd-4a8b-8fbe-b4559ac9acc8"),
                            SkillName = "Adaptability"
                        },
                        new
                        {
                            Id = new Guid("0544eeef-c5c4-457b-9517-3de80d6b71a8"),
                            SkillName = "Collaboration"
                        },
                        new
                        {
                            Id = new Guid("acb6f003-643d-41a4-8f26-8977f5127d0f"),
                            SkillName = "Conflict Resolution"
                        },
                        new
                        {
                            Id = new Guid("41f83963-b68c-407f-bc63-bacaadf94116"),
                            SkillName = "Creativity"
                        },
                        new
                        {
                            Id = new Guid("3305178e-d1dc-4fce-9bb2-72ccad5f66d8"),
                            SkillName = "Work Ethic"
                        },
                        new
                        {
                            Id = new Guid("b52df08d-5b64-42de-b0d6-5cf073df38e3"),
                            SkillName = "Interpersonal Skills"
                        },
                        new
                        {
                            Id = new Guid("9385d796-c145-4307-a422-23c5a2c25c46"),
                            SkillName = "Emotional Intelligence"
                        },
                        new
                        {
                            Id = new Guid("377c6c17-a99f-41ab-9cf7-265260abda5f"),
                            SkillName = "Business Analysis"
                        },
                        new
                        {
                            Id = new Guid("c3071259-a815-4bf2-b188-69d3d2bb163f"),
                            SkillName = "Product Management"
                        },
                        new
                        {
                            Id = new Guid("d85b63e4-71a4-4ea7-9a88-e972790cf7f2"),
                            SkillName = "Business Strategy"
                        },
                        new
                        {
                            Id = new Guid("1970ac49-06db-4853-a38b-ad0a40856e8d"),
                            SkillName = "Operations Management"
                        },
                        new
                        {
                            Id = new Guid("acf119cf-b230-4208-802f-4f62c8f7c77b"),
                            SkillName = "Supply Chain Management"
                        },
                        new
                        {
                            Id = new Guid("eea37ca5-5664-49fd-b5ec-6ae80bfee508"),
                            SkillName = "Entrepreneurship"
                        },
                        new
                        {
                            Id = new Guid("5ecfc77c-37a9-4e23-b52c-9a23a6f38a03"),
                            SkillName = "Negotiation"
                        },
                        new
                        {
                            Id = new Guid("a292f829-6aee-4c92-8614-652b48c48b66"),
                            SkillName = "Risk Management"
                        },
                        new
                        {
                            Id = new Guid("436cd31e-b822-4515-8c02-88e8e9c02bd0"),
                            SkillName = "SEO (Search Engine Optimization)"
                        },
                        new
                        {
                            Id = new Guid("42a84a06-e992-4ca6-9ddf-43b95a56c371"),
                            SkillName = "SEM (Search Engine Marketing)"
                        },
                        new
                        {
                            Id = new Guid("326ed27e-ed02-40ea-8582-a8b195b95b1b"),
                            SkillName = "Content Marketing"
                        },
                        new
                        {
                            Id = new Guid("e2019b16-722a-44df-bb77-41cb47401511"),
                            SkillName = "Social Media Marketing"
                        },
                        new
                        {
                            Id = new Guid("0e124843-2a49-4c8c-8a0f-4db5d353ca85"),
                            SkillName = "Brand Management"
                        },
                        new
                        {
                            Id = new Guid("510bee0b-6ae2-4481-99b6-f5ed0cd17272"),
                            SkillName = "Market Research"
                        },
                        new
                        {
                            Id = new Guid("0493d13f-a2e6-44df-a813-5ec2859bf6e4"),
                            SkillName = "Email Marketing"
                        },
                        new
                        {
                            Id = new Guid("ce9698aa-dbd8-483d-848d-13aca7195dbe"),
                            SkillName = "Public Relations"
                        });
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenteeApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MenteeApplicationId")
                        .IsUnique();

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PassAutoGenerate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Assignment", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentee")
                        .WithMany("AssignmentsReceived")
                        .HasForeignKey("MenteeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentor")
                        .WithMany("AssignmentsGiven")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mentee");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.AssignmentSubmission", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.BookingCall", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentee")
                        .WithMany("BookingCallAsMentee")
                        .HasForeignKey("MenteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.Session", "Session")
                        .WithMany("BookingCalls")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mentee");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Feedback", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.MenteeApplication", "MenteeApplication")
                        .WithOne("Feedback")
                        .HasForeignKey("TorTee.Core.Domains.Entities.Feedback", "MenteeApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenteeApplication");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteeApplication", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.MenteePlan", "MenteePlan")
                        .WithMany("MenteeApplications")
                        .HasForeignKey("MenteePlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "User")
                        .WithMany("MenteeApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenteePlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteeApplicationAnswer", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.MenteeApplication", "MenteeApplication")
                        .WithMany("MenteeApplicationAnswers")
                        .HasForeignKey("MenteeApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.ApplicationQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenteeApplication");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteePlan", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentor")
                        .WithOne("MenteePlan")
                        .HasForeignKey("TorTee.Core.Domains.Entities.MenteePlan", "MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MentorApplication", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Message", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Receiver")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Notification", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Session", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentor")
                        .WithOne("Sessions")
                        .HasForeignKey("TorTee.Core.Domains.Entities.Session", "MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Transaction", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.MenteeApplication", "MenteeApplication")
                        .WithOne("Transaction")
                        .HasForeignKey("TorTee.Core.Domains.Entities.Transaction", "MenteeApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenteeApplication");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.UserRole", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.UserSkill", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.ApplicationQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Assignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteeApplication", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("MenteeApplicationAnswers");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteePlan", b =>
                {
                    b.Navigation("MenteeApplications");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Session", b =>
                {
                    b.Navigation("BookingCalls");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Skill", b =>
                {
                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.User", b =>
                {
                    b.Navigation("AssignmentsGiven");

                    b.Navigation("AssignmentsReceived");

                    b.Navigation("BookingCallAsMentee");

                    b.Navigation("MenteeApplications");

                    b.Navigation("MenteePlan");

                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("Notifications");

                    b.Navigation("Sessions");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
