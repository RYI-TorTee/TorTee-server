// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TorTee.DAL.DataContext;

#nullable disable

namespace TorTee.DAL.Migrations
{
    [DbContext(typeof(TorTeeDbContext))]
    [Migration("20240621092855_FeedbackRelation")]
    partial class FeedbackRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.ApplicationQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationQuestion");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3685c6c7-f1e9-4194-a6b0-8835596ab0e1"),
                            Content = "What best describes the goal of your mentorship?"
                        },
                        new
                        {
                            Id = new Guid("9856643c-00d2-49f8-bf1d-d6c0a7d38d8f"),
                            Content = "When would you like to reach that goal?"
                        },
                        new
                        {
                            Id = new Guid("461fc821-87a0-48c0-8bec-aaa5af2ab490"),
                            Content = "Write a message to Mentor"
                        });
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenteeId");

                    b.HasIndex("MentorId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.AssignmentSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentOfMentor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Grade")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmitedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.ToTable("AssignmentSubmission");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.BookingCall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MenteeId");

                    b.HasIndex("SessionId");

                    b.ToTable("BookingCalls");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenteeApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Reply")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenteeApplicationId")
                        .IsUnique();

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteeApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppliedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FeedbackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenteePlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MenteePlanId");

                    b.HasIndex("UserId");

                    b.ToTable("MenteeApplications");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteeApplicationAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenteeApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResponseContent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenteeApplicationId");

                    b.HasIndex("QuestionId");

                    b.ToTable("MenteeApplicationAnswers");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CallPerMonth")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionOfPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationOfMeeting")
                        .HasColumnType("int");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalSlot")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MentorId")
                        .IsUnique();

                    b.ToTable("MenteePlans");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MentorApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Achievement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AppliedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CallPerMonth")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionOfPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationOfMeeting")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalSlot")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MentorApplications");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MentorId")
                        .IsUnique();

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c1bc776-86d1-416a-80e9-33efcc5205b6"),
                            SkillName = "Project Management"
                        },
                        new
                        {
                            Id = new Guid("7f9ad1d6-f1b9-4993-874a-b0d07ec340f6"),
                            SkillName = "Software Development"
                        },
                        new
                        {
                            Id = new Guid("bc35de5c-4b78-4c6d-9a4c-3ae296a1c319"),
                            SkillName = "Data Analysis"
                        },
                        new
                        {
                            Id = new Guid("3a032dd9-3792-40bc-a0b2-a6418dc06575"),
                            SkillName = "Digital Marketing"
                        },
                        new
                        {
                            Id = new Guid("bdd968b0-16a5-4e68-9d5c-8176e1aacbd5"),
                            SkillName = "Machine Learning"
                        },
                        new
                        {
                            Id = new Guid("ad1993f4-a5e3-457b-8d2f-c0172e04c680"),
                            SkillName = "Communication"
                        },
                        new
                        {
                            Id = new Guid("e616fa1c-d5f4-461b-be2d-3ab3cbd0287d"),
                            SkillName = "Team Leadership"
                        },
                        new
                        {
                            Id = new Guid("54747524-62d5-4332-bedd-f1f2569938e2"),
                            SkillName = "Problem Solving"
                        },
                        new
                        {
                            Id = new Guid("62f6b960-267a-4270-be36-bffd545b7840"),
                            SkillName = "Critical Thinking"
                        },
                        new
                        {
                            Id = new Guid("bc7593ac-1c6c-4c2c-b259-c941cf93f056"),
                            SkillName = "Financial Analysis"
                        },
                        new
                        {
                            Id = new Guid("55c4ab2c-19e6-4198-83c0-c42719a4d1e5"),
                            SkillName = "Graphic Design"
                        },
                        new
                        {
                            Id = new Guid("a87fbb79-17de-4b6c-b145-995fa32733b8"),
                            SkillName = "Customer Service"
                        },
                        new
                        {
                            Id = new Guid("bff74aad-d237-4ef6-b985-316884913369"),
                            SkillName = "Sales"
                        },
                        new
                        {
                            Id = new Guid("47852fac-0e6d-4b14-828c-15e8a92b3b34"),
                            SkillName = "Strategic Planning"
                        },
                        new
                        {
                            Id = new Guid("4c9da501-69cd-4c89-a69c-ee0a94f538b3"),
                            SkillName = "Web Development"
                        },
                        new
                        {
                            Id = new Guid("d16a29ee-b1fe-4d55-a619-5ace614b2f28"),
                            SkillName = "Mobile Development"
                        },
                        new
                        {
                            Id = new Guid("98601cac-8d41-4310-a0b3-2eb0da753693"),
                            SkillName = "Cloud Computing"
                        },
                        new
                        {
                            Id = new Guid("914b2319-4a0a-454b-a013-c92c5b70b5c0"),
                            SkillName = "Cybersecurity"
                        },
                        new
                        {
                            Id = new Guid("7c75da39-e1d2-4f00-9f7f-5e001ff45772"),
                            SkillName = "Database Management"
                        },
                        new
                        {
                            Id = new Guid("d61e8480-8676-4884-bb00-640d1f23d025"),
                            SkillName = "Network Administration"
                        },
                        new
                        {
                            Id = new Guid("d86d9a47-934f-402b-a34e-4b2b99839e32"),
                            SkillName = "DevOps"
                        },
                        new
                        {
                            Id = new Guid("e42050cf-ce91-4f22-b04b-7af899d4d5de"),
                            SkillName = "Artificial Intelligence"
                        },
                        new
                        {
                            Id = new Guid("acb98f99-52c5-485b-b706-6988ff7df8d2"),
                            SkillName = "Blockchain"
                        },
                        new
                        {
                            Id = new Guid("634306ff-9115-4c53-8ba5-34a9e2aedf88"),
                            SkillName = "IT Support"
                        },
                        new
                        {
                            Id = new Guid("4e8ddb89-bd86-44ed-89b2-7121ec9b9e2f"),
                            SkillName = "Time Management"
                        },
                        new
                        {
                            Id = new Guid("f06e7fee-abf4-4d82-8278-9b724b7cc776"),
                            SkillName = "Adaptability"
                        },
                        new
                        {
                            Id = new Guid("75e9cfc2-8227-4283-b3ab-615a3506c4f4"),
                            SkillName = "Collaboration"
                        },
                        new
                        {
                            Id = new Guid("d115aacb-3529-4b64-946e-8788bf7b23d7"),
                            SkillName = "Conflict Resolution"
                        },
                        new
                        {
                            Id = new Guid("cd017d80-9165-43e5-86cd-4aaa26598b3f"),
                            SkillName = "Creativity"
                        },
                        new
                        {
                            Id = new Guid("813f8143-0ab0-44bf-8bcb-e318d129b0dd"),
                            SkillName = "Work Ethic"
                        },
                        new
                        {
                            Id = new Guid("abf4c33a-74a8-40d7-aa25-2489d231388a"),
                            SkillName = "Interpersonal Skills"
                        },
                        new
                        {
                            Id = new Guid("78109c45-3ede-4b45-a886-0198fb7f11ed"),
                            SkillName = "Emotional Intelligence"
                        },
                        new
                        {
                            Id = new Guid("87c297c2-422b-4247-87c6-68da564785d6"),
                            SkillName = "Business Analysis"
                        },
                        new
                        {
                            Id = new Guid("f3490198-5603-4c22-9714-2f7861ad2c97"),
                            SkillName = "Product Management"
                        },
                        new
                        {
                            Id = new Guid("ec75adce-91c9-4b7f-a915-2c979a8cdeb3"),
                            SkillName = "Business Strategy"
                        },
                        new
                        {
                            Id = new Guid("366a0a18-037f-4afd-87be-b3159e1138ab"),
                            SkillName = "Operations Management"
                        },
                        new
                        {
                            Id = new Guid("e2270e3c-266d-4613-a2a0-d0ea518e6c2b"),
                            SkillName = "Supply Chain Management"
                        },
                        new
                        {
                            Id = new Guid("1872f05b-2720-4b24-a392-f5cd2eae7d25"),
                            SkillName = "Entrepreneurship"
                        },
                        new
                        {
                            Id = new Guid("b64d867a-8cbb-4a56-a3d1-9f224754608d"),
                            SkillName = "Negotiation"
                        },
                        new
                        {
                            Id = new Guid("63a247f4-fe79-4c87-8f9d-070058d6d2e5"),
                            SkillName = "Risk Management"
                        },
                        new
                        {
                            Id = new Guid("aab569c8-e81d-4dc6-ac4b-cf5d484052be"),
                            SkillName = "SEO (Search Engine Optimization)"
                        },
                        new
                        {
                            Id = new Guid("bf710b1c-5bb0-47bc-80c0-0a4b21013a97"),
                            SkillName = "SEM (Search Engine Marketing)"
                        },
                        new
                        {
                            Id = new Guid("bb3be023-0dfe-4a22-aa51-5f71b0827227"),
                            SkillName = "Content Marketing"
                        },
                        new
                        {
                            Id = new Guid("9209a98c-58f0-4b6c-b0b8-2268a857f069"),
                            SkillName = "Social Media Marketing"
                        },
                        new
                        {
                            Id = new Guid("ba866550-c0a4-43a1-9321-a9eaed601de1"),
                            SkillName = "Brand Management"
                        },
                        new
                        {
                            Id = new Guid("b6db4002-b608-426a-b70c-2957b9953f57"),
                            SkillName = "Market Research"
                        },
                        new
                        {
                            Id = new Guid("89910884-7dd5-4e04-8636-e0a912711b93"),
                            SkillName = "Email Marketing"
                        },
                        new
                        {
                            Id = new Guid("0e68507c-4c6e-4489-8532-20d4d03637fb"),
                            SkillName = "Public Relations"
                        });
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenteeApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MenteeApplicationId")
                        .IsUnique();

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PassAutoGenerate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Assignment", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentee")
                        .WithMany("AssignmentsReceived")
                        .HasForeignKey("MenteeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentor")
                        .WithMany("AssignmentsGiven")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mentee");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.AssignmentSubmission", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.BookingCall", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentee")
                        .WithMany("BookingCallAsMentee")
                        .HasForeignKey("MenteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.Session", "Session")
                        .WithMany("BookingCalls")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mentee");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Feedback", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.MenteeApplication", "MenteeApplication")
                        .WithOne("Feedback")
                        .HasForeignKey("TorTee.Core.Domains.Entities.Feedback", "MenteeApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenteeApplication");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteeApplication", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.MenteePlan", "MenteePlan")
                        .WithMany("MenteeApplications")
                        .HasForeignKey("MenteePlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "User")
                        .WithMany("MenteeApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenteePlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteeApplicationAnswer", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.MenteeApplication", "MenteeApplication")
                        .WithMany("MenteeApplicationAnswers")
                        .HasForeignKey("MenteeApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.ApplicationQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenteeApplication");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteePlan", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentor")
                        .WithOne("MenteePlan")
                        .HasForeignKey("TorTee.Core.Domains.Entities.MenteePlan", "MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MentorApplication", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Message", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Receiver")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Notification", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Session", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentor")
                        .WithOne("Sessions")
                        .HasForeignKey("TorTee.Core.Domains.Entities.Session", "MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Transaction", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.MenteeApplication", "MenteeApplication")
                        .WithOne("Transaction")
                        .HasForeignKey("TorTee.Core.Domains.Entities.Transaction", "MenteeApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenteeApplication");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.UserRole", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.UserSkill", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.ApplicationQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Assignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteeApplication", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("MenteeApplicationAnswers");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteePlan", b =>
                {
                    b.Navigation("MenteeApplications");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Session", b =>
                {
                    b.Navigation("BookingCalls");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Skill", b =>
                {
                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.User", b =>
                {
                    b.Navigation("AssignmentsGiven");

                    b.Navigation("AssignmentsReceived");

                    b.Navigation("BookingCallAsMentee");

                    b.Navigation("MenteeApplications");

                    b.Navigation("MenteePlan");

                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("Notifications");

                    b.Navigation("Sessions");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
