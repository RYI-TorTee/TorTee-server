// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TorTee.DAL.DataContext;

#nullable disable

namespace TorTee.DAL.Migrations
{
    [DbContext(typeof(TorTeeDbContext))]
    [Migration("20240617050901_AddPriceToApplication")]
    partial class AddPriceToApplication
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.ApplicationQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationQuestion");

                    b.HasData(
                        new
                        {
                            Id = new Guid("20c47693-bae1-47c1-b707-f94a04af0582"),
                            Content = "What best describes the goal of your mentorship?"
                        },
                        new
                        {
                            Id = new Guid("fe0ebb61-12b3-4fb8-99f9-8e5caf5c3301"),
                            Content = "When would you like to reach that goal?"
                        },
                        new
                        {
                            Id = new Guid("08674402-f177-43f4-83c4-dbcaa66e1f7c"),
                            Content = "Write a message to Mentor"
                        });
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenteeId");

                    b.HasIndex("MentorId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.AssignmentSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentOfMentor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Grade")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmitedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.ToTable("AssignmentSubmission");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.BookingCall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MenteeId");

                    b.HasIndex("SessionId");

                    b.ToTable("BookingCalls");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenteeId");

                    b.HasIndex("MentorId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteeApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppliedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenteePlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MenteePlanId");

                    b.HasIndex("UserId");

                    b.ToTable("MenteeApplications");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteeApplicationAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenteeApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResponseContent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenteeApplicationId");

                    b.HasIndex("QuestionId");

                    b.ToTable("MenteeApplicationAnswers");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CallPerMonth")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionOfPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationOfMeeting")
                        .HasColumnType("int");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalSlot")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MentorId")
                        .IsUnique();

                    b.ToTable("MenteePlans");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MentorApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Achievement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AppliedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CallPerMonth")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionOfPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationOfMeeting")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalSlot")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MentorApplications");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MentorId")
                        .IsUnique();

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc2fbe38-61e3-47fe-badf-58a92be72db1"),
                            SkillName = "Project Management"
                        },
                        new
                        {
                            Id = new Guid("16dce83d-00df-4583-99a4-cfad499c6560"),
                            SkillName = "Software Development"
                        },
                        new
                        {
                            Id = new Guid("1bb626b6-ae6d-499b-8e9b-f56bcbeefed2"),
                            SkillName = "Data Analysis"
                        },
                        new
                        {
                            Id = new Guid("ea0900ad-927a-4add-9ecd-872b650a9bae"),
                            SkillName = "Digital Marketing"
                        },
                        new
                        {
                            Id = new Guid("3b7616fe-577b-461c-afba-6d80f0ae1092"),
                            SkillName = "Machine Learning"
                        },
                        new
                        {
                            Id = new Guid("2a3c741b-1e25-4ad8-8b31-1747fb12cac1"),
                            SkillName = "Communication"
                        },
                        new
                        {
                            Id = new Guid("ba5a2a00-f91a-42be-9eb9-65854907e67d"),
                            SkillName = "Team Leadership"
                        },
                        new
                        {
                            Id = new Guid("3153f1dc-6400-4ac3-849d-f0602cbee025"),
                            SkillName = "Problem Solving"
                        },
                        new
                        {
                            Id = new Guid("08eface8-59b8-4e1f-b7e9-ab3749469f57"),
                            SkillName = "Critical Thinking"
                        },
                        new
                        {
                            Id = new Guid("d454c908-e9c3-4a5b-83ad-2e81ecfae67e"),
                            SkillName = "Financial Analysis"
                        },
                        new
                        {
                            Id = new Guid("cefddcfe-eca1-49b0-acdb-71abbf33f999"),
                            SkillName = "Graphic Design"
                        },
                        new
                        {
                            Id = new Guid("060a6a24-2999-4db6-8ba5-1967370f3fe0"),
                            SkillName = "Customer Service"
                        },
                        new
                        {
                            Id = new Guid("0e4422d6-84a7-4327-94ab-4fde64389a3d"),
                            SkillName = "Sales"
                        },
                        new
                        {
                            Id = new Guid("200d4540-27d2-47aa-ad90-42ba3ac2c804"),
                            SkillName = "Strategic Planning"
                        },
                        new
                        {
                            Id = new Guid("3fcd5ac1-fff8-40ac-a780-cbda6d4307c1"),
                            SkillName = "Web Development"
                        },
                        new
                        {
                            Id = new Guid("4c1c7f10-c676-462a-9adb-58869d7cb64a"),
                            SkillName = "Mobile Development"
                        },
                        new
                        {
                            Id = new Guid("73ee3624-c90a-4759-855f-39131740a386"),
                            SkillName = "Cloud Computing"
                        },
                        new
                        {
                            Id = new Guid("e39935e3-3f79-47c6-b5e2-2e9ece19291e"),
                            SkillName = "Cybersecurity"
                        },
                        new
                        {
                            Id = new Guid("04999a8d-5543-4f8d-a116-d8a4eb60de8f"),
                            SkillName = "Database Management"
                        },
                        new
                        {
                            Id = new Guid("926efd49-0ec7-48eb-a8b1-eea9b10e4be5"),
                            SkillName = "Network Administration"
                        },
                        new
                        {
                            Id = new Guid("63569316-eeb5-48b2-a2c8-3f608fc0434e"),
                            SkillName = "DevOps"
                        },
                        new
                        {
                            Id = new Guid("1ca78eb9-3b77-4622-9880-a1ec1631d92d"),
                            SkillName = "Artificial Intelligence"
                        },
                        new
                        {
                            Id = new Guid("261bce89-ffe7-46b0-8dc7-3bd6cd9ab0a6"),
                            SkillName = "Blockchain"
                        },
                        new
                        {
                            Id = new Guid("b315a800-0782-48c7-906a-bb6126e38797"),
                            SkillName = "IT Support"
                        },
                        new
                        {
                            Id = new Guid("fe86c6d9-e17b-4bc7-ae22-d254b062ee80"),
                            SkillName = "Time Management"
                        },
                        new
                        {
                            Id = new Guid("8ea60a9e-9d02-4974-a9cf-cf9d0d4750cb"),
                            SkillName = "Adaptability"
                        },
                        new
                        {
                            Id = new Guid("0cc9fb20-172c-45a5-95c4-dc553ae5ba0c"),
                            SkillName = "Collaboration"
                        },
                        new
                        {
                            Id = new Guid("fb9a2293-ceab-4ed4-8b06-2b4d66aa652e"),
                            SkillName = "Conflict Resolution"
                        },
                        new
                        {
                            Id = new Guid("103f77c8-7280-4812-a0a4-ae110bfc8a12"),
                            SkillName = "Creativity"
                        },
                        new
                        {
                            Id = new Guid("4ca31c64-55a8-4d50-bc77-c97dce4d98df"),
                            SkillName = "Work Ethic"
                        },
                        new
                        {
                            Id = new Guid("428828fa-e3a3-4ac8-ac5e-c995355d0580"),
                            SkillName = "Interpersonal Skills"
                        },
                        new
                        {
                            Id = new Guid("81338730-d088-43b7-bdec-93234b1c22db"),
                            SkillName = "Emotional Intelligence"
                        },
                        new
                        {
                            Id = new Guid("e154df7d-f44b-4c0e-a4bf-db4e5eed8216"),
                            SkillName = "Business Analysis"
                        },
                        new
                        {
                            Id = new Guid("85bcf89c-3b7f-4648-b104-e39ec40c61a7"),
                            SkillName = "Product Management"
                        },
                        new
                        {
                            Id = new Guid("2b22a17d-3e1f-43ba-bd95-c022900effd7"),
                            SkillName = "Business Strategy"
                        },
                        new
                        {
                            Id = new Guid("3fc4035f-0b2c-4451-add8-12fa6cdd5992"),
                            SkillName = "Operations Management"
                        },
                        new
                        {
                            Id = new Guid("b6320eb7-5373-469c-8371-61f366e3febd"),
                            SkillName = "Supply Chain Management"
                        },
                        new
                        {
                            Id = new Guid("b2df286b-bae3-4ebd-94d8-8ec5c06b0033"),
                            SkillName = "Entrepreneurship"
                        },
                        new
                        {
                            Id = new Guid("927a1c6d-8c1f-482a-87f9-0cbdadd18bb9"),
                            SkillName = "Negotiation"
                        },
                        new
                        {
                            Id = new Guid("ec07ffc9-54c9-4fd5-b0e8-b109b8516f1b"),
                            SkillName = "Risk Management"
                        },
                        new
                        {
                            Id = new Guid("4ad44c76-2726-40ad-ac92-15c1a19aaba0"),
                            SkillName = "SEO (Search Engine Optimization)"
                        },
                        new
                        {
                            Id = new Guid("a69ea62e-bcd4-40f1-af9e-e67f5c2ad1f1"),
                            SkillName = "SEM (Search Engine Marketing)"
                        },
                        new
                        {
                            Id = new Guid("8961c7aa-5769-48fc-bef1-696757d7e05c"),
                            SkillName = "Content Marketing"
                        },
                        new
                        {
                            Id = new Guid("5f188639-d28b-4f48-84d1-484653cd0cc0"),
                            SkillName = "Social Media Marketing"
                        },
                        new
                        {
                            Id = new Guid("a2a15503-5fdb-4b77-8904-575c5f7caff4"),
                            SkillName = "Brand Management"
                        },
                        new
                        {
                            Id = new Guid("8f75f053-2cca-4cb7-91f2-88c966609ffd"),
                            SkillName = "Market Research"
                        },
                        new
                        {
                            Id = new Guid("e5e1075a-71eb-49ca-a327-24cb3f3c451e"),
                            SkillName = "Email Marketing"
                        },
                        new
                        {
                            Id = new Guid("8d041a7c-3496-4e8c-9e33-d1b4ef8bd365"),
                            SkillName = "Public Relations"
                        });
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenteeApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MenteeApplicationId")
                        .IsUnique();

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Assignment", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentee")
                        .WithMany("AssignmentsReceived")
                        .HasForeignKey("MenteeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentor")
                        .WithMany("AssignmentsGiven")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mentee");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.AssignmentSubmission", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.BookingCall", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentee")
                        .WithMany("BookingCallAsMentee")
                        .HasForeignKey("MenteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.Session", "Session")
                        .WithMany("BookingCalls")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mentee");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Feedback", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentee")
                        .WithMany("FeedbacksGiven")
                        .HasForeignKey("MenteeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentor")
                        .WithMany("FeedbacksReceived")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mentee");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteeApplication", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.MenteePlan", "MenteePlan")
                        .WithMany("MenteeApplications")
                        .HasForeignKey("MenteePlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "User")
                        .WithMany("MenteeApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenteePlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteeApplicationAnswer", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.MenteeApplication", "MenteeApplication")
                        .WithMany("MenteeApplicationAnswers")
                        .HasForeignKey("MenteeApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.ApplicationQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenteeApplication");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteePlan", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentor")
                        .WithOne("MenteePlans")
                        .HasForeignKey("TorTee.Core.Domains.Entities.MenteePlan", "MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MentorApplication", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Message", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Receiver")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Notification", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Session", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentor")
                        .WithOne("Sessions")
                        .HasForeignKey("TorTee.Core.Domains.Entities.Session", "MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Transaction", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.MenteeApplication", "MenteeApplication")
                        .WithOne("Transaction")
                        .HasForeignKey("TorTee.Core.Domains.Entities.Transaction", "MenteeApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenteeApplication");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.UserRole", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.UserSkill", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.ApplicationQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Assignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteeApplication", b =>
                {
                    b.Navigation("MenteeApplicationAnswers");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteePlan", b =>
                {
                    b.Navigation("MenteeApplications");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Session", b =>
                {
                    b.Navigation("BookingCalls");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Skill", b =>
                {
                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.User", b =>
                {
                    b.Navigation("AssignmentsGiven");

                    b.Navigation("AssignmentsReceived");

                    b.Navigation("BookingCallAsMentee");

                    b.Navigation("FeedbacksGiven");

                    b.Navigation("FeedbacksReceived");

                    b.Navigation("MenteeApplications");

                    b.Navigation("MenteePlans");

                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("Notifications");

                    b.Navigation("Sessions");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
