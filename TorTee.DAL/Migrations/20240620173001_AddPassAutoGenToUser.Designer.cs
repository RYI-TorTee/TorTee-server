// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TorTee.DAL.DataContext;

#nullable disable

namespace TorTee.DAL.Migrations
{
    [DbContext(typeof(TorTeeDbContext))]
    [Migration("20240620173001_AddPassAutoGenToUser")]
    partial class AddPassAutoGenToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.ApplicationQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationQuestion");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef9897d1-873a-4022-9eab-264d1560d30f"),
                            Content = "What best describes the goal of your mentorship?"
                        },
                        new
                        {
                            Id = new Guid("63804588-b07a-4cc9-b5a4-5ec27a9e1af8"),
                            Content = "When would you like to reach that goal?"
                        },
                        new
                        {
                            Id = new Guid("a2945086-f99c-4812-8f76-9a0129bcbe03"),
                            Content = "Write a message to Mentor"
                        });
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenteeId");

                    b.HasIndex("MentorId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.AssignmentSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentOfMentor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Grade")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmitedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.ToTable("AssignmentSubmission");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.BookingCall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MenteeId");

                    b.HasIndex("SessionId");

                    b.ToTable("BookingCalls");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenteeId");

                    b.HasIndex("MentorId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteeApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppliedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenteePlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MenteePlanId");

                    b.HasIndex("UserId");

                    b.ToTable("MenteeApplications");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteeApplicationAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenteeApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResponseContent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenteeApplicationId");

                    b.HasIndex("QuestionId");

                    b.ToTable("MenteeApplicationAnswers");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CallPerMonth")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionOfPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationOfMeeting")
                        .HasColumnType("int");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalSlot")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MentorId")
                        .IsUnique();

                    b.ToTable("MenteePlans");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MentorApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Achievement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AppliedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CallPerMonth")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionOfPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationOfMeeting")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalSlot")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MentorApplications");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MentorId")
                        .IsUnique();

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a6501a4-08de-48a1-8296-a179f5870803"),
                            SkillName = "Project Management"
                        },
                        new
                        {
                            Id = new Guid("25c19b46-cf55-4242-a339-82913b5c67c6"),
                            SkillName = "Software Development"
                        },
                        new
                        {
                            Id = new Guid("3756c080-287b-4af7-811c-692f64aeb2f5"),
                            SkillName = "Data Analysis"
                        },
                        new
                        {
                            Id = new Guid("7718637b-bb5b-46cd-94ca-d3720759cea4"),
                            SkillName = "Digital Marketing"
                        },
                        new
                        {
                            Id = new Guid("a7afc408-8adb-47cf-a609-6e0f2461c982"),
                            SkillName = "Machine Learning"
                        },
                        new
                        {
                            Id = new Guid("327fb175-cec3-434f-bb2f-f1e5c8bd3a32"),
                            SkillName = "Communication"
                        },
                        new
                        {
                            Id = new Guid("641294be-5457-4ebb-9a75-ebd011532d13"),
                            SkillName = "Team Leadership"
                        },
                        new
                        {
                            Id = new Guid("627dba16-250d-4319-a421-a642f94f74ac"),
                            SkillName = "Problem Solving"
                        },
                        new
                        {
                            Id = new Guid("fb91a4af-a8d8-45cc-8d7f-08d6e11ab868"),
                            SkillName = "Critical Thinking"
                        },
                        new
                        {
                            Id = new Guid("6977fd1d-eecf-4e5a-b1ac-f36a0a99d3a3"),
                            SkillName = "Financial Analysis"
                        },
                        new
                        {
                            Id = new Guid("f62b2461-0011-4ece-b6f6-36bb388e77a2"),
                            SkillName = "Graphic Design"
                        },
                        new
                        {
                            Id = new Guid("525f7706-4383-4381-ae59-2ff438c9ed5b"),
                            SkillName = "Customer Service"
                        },
                        new
                        {
                            Id = new Guid("f2b9027e-b7ba-4564-a0f4-3b55be5af1e4"),
                            SkillName = "Sales"
                        },
                        new
                        {
                            Id = new Guid("0a052113-73a3-49e7-8a83-01313ee83c4a"),
                            SkillName = "Strategic Planning"
                        },
                        new
                        {
                            Id = new Guid("32577216-4376-4f13-9b0f-78da3e628934"),
                            SkillName = "Web Development"
                        },
                        new
                        {
                            Id = new Guid("49383ed4-2787-4cc9-adb7-12cee8d0367e"),
                            SkillName = "Mobile Development"
                        },
                        new
                        {
                            Id = new Guid("8a052ea6-28b1-47b9-83a1-d15c2304b8a2"),
                            SkillName = "Cloud Computing"
                        },
                        new
                        {
                            Id = new Guid("24334669-3bc5-4415-9d1a-dafa65ccedba"),
                            SkillName = "Cybersecurity"
                        },
                        new
                        {
                            Id = new Guid("5f22f55c-9984-4807-baa6-bcafd9bebedf"),
                            SkillName = "Database Management"
                        },
                        new
                        {
                            Id = new Guid("4f2be819-05fc-4f80-a1a8-a44fa20cb993"),
                            SkillName = "Network Administration"
                        },
                        new
                        {
                            Id = new Guid("8e66339d-1ebd-49c4-b8c5-a26a86f8fdd7"),
                            SkillName = "DevOps"
                        },
                        new
                        {
                            Id = new Guid("8bc1b5fe-ac50-4238-8054-0a11a2608129"),
                            SkillName = "Artificial Intelligence"
                        },
                        new
                        {
                            Id = new Guid("7bc02f15-727c-4346-885b-117c22a25ad4"),
                            SkillName = "Blockchain"
                        },
                        new
                        {
                            Id = new Guid("cd3fd7b2-1af7-4ad7-b934-059abe070177"),
                            SkillName = "IT Support"
                        },
                        new
                        {
                            Id = new Guid("1311047e-9637-4467-bcb3-24f0396618d7"),
                            SkillName = "Time Management"
                        },
                        new
                        {
                            Id = new Guid("2ff5163f-8c5e-478d-a2ea-0b9864f9a85c"),
                            SkillName = "Adaptability"
                        },
                        new
                        {
                            Id = new Guid("86042c3d-a918-40da-b343-e865628b8b4b"),
                            SkillName = "Collaboration"
                        },
                        new
                        {
                            Id = new Guid("df7944d7-35be-41ff-bd9c-8419973f2bab"),
                            SkillName = "Conflict Resolution"
                        },
                        new
                        {
                            Id = new Guid("4bfed839-4aec-46bc-bc87-00fdfa748ef9"),
                            SkillName = "Creativity"
                        },
                        new
                        {
                            Id = new Guid("7b7fd4db-42c2-4062-91f3-76c800f5946e"),
                            SkillName = "Work Ethic"
                        },
                        new
                        {
                            Id = new Guid("c1fdada5-fd58-414d-9bc6-945cc8fafe63"),
                            SkillName = "Interpersonal Skills"
                        },
                        new
                        {
                            Id = new Guid("72af7d7a-c249-4d1b-aa62-ccbd29c91729"),
                            SkillName = "Emotional Intelligence"
                        },
                        new
                        {
                            Id = new Guid("a9316480-566b-4f0d-bbdb-4de8beef616b"),
                            SkillName = "Business Analysis"
                        },
                        new
                        {
                            Id = new Guid("efc5c79a-c193-41c3-bfd8-c08cf0021ce4"),
                            SkillName = "Product Management"
                        },
                        new
                        {
                            Id = new Guid("c7a5a7a2-8bb5-4655-baef-b198a13a1431"),
                            SkillName = "Business Strategy"
                        },
                        new
                        {
                            Id = new Guid("d71ca8bc-e5b8-4be8-9493-4a8f9e9d873d"),
                            SkillName = "Operations Management"
                        },
                        new
                        {
                            Id = new Guid("0c1ec588-2478-4519-92a4-49770a0a51e6"),
                            SkillName = "Supply Chain Management"
                        },
                        new
                        {
                            Id = new Guid("ff8e9b2a-f08f-4075-8364-db8e07530e68"),
                            SkillName = "Entrepreneurship"
                        },
                        new
                        {
                            Id = new Guid("49a352f7-330b-43ff-90ba-ed8adec9a2cc"),
                            SkillName = "Negotiation"
                        },
                        new
                        {
                            Id = new Guid("396588f0-a0d8-4914-bed1-2bc53e969eee"),
                            SkillName = "Risk Management"
                        },
                        new
                        {
                            Id = new Guid("b344c3e8-bc98-4953-bf9d-ddc2c80c1eab"),
                            SkillName = "SEO (Search Engine Optimization)"
                        },
                        new
                        {
                            Id = new Guid("6bdf6923-be76-4d36-a71a-76747c1d7e25"),
                            SkillName = "SEM (Search Engine Marketing)"
                        },
                        new
                        {
                            Id = new Guid("b6784b94-edef-48b7-9f49-e9d66d98d8b0"),
                            SkillName = "Content Marketing"
                        },
                        new
                        {
                            Id = new Guid("e2a02b7f-b17a-4e0d-917c-24fd3893c4ad"),
                            SkillName = "Social Media Marketing"
                        },
                        new
                        {
                            Id = new Guid("de89fe9e-fa78-4e6f-a61d-0680065bf3f9"),
                            SkillName = "Brand Management"
                        },
                        new
                        {
                            Id = new Guid("7d53755a-3107-4823-920a-b9a1dc954582"),
                            SkillName = "Market Research"
                        },
                        new
                        {
                            Id = new Guid("b6f719b4-2880-47dc-bda8-3e1f91240138"),
                            SkillName = "Email Marketing"
                        },
                        new
                        {
                            Id = new Guid("20591672-1956-4265-a107-d6c5219a4ab7"),
                            SkillName = "Public Relations"
                        });
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenteeApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MenteeApplicationId")
                        .IsUnique();

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PassAutoGenerate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Assignment", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentee")
                        .WithMany("AssignmentsReceived")
                        .HasForeignKey("MenteeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentor")
                        .WithMany("AssignmentsGiven")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mentee");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.AssignmentSubmission", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.BookingCall", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentee")
                        .WithMany("BookingCallAsMentee")
                        .HasForeignKey("MenteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.Session", "Session")
                        .WithMany("BookingCalls")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mentee");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Feedback", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentee")
                        .WithMany("FeedbacksGiven")
                        .HasForeignKey("MenteeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentor")
                        .WithMany("FeedbacksReceived")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mentee");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteeApplication", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.MenteePlan", "MenteePlan")
                        .WithMany("MenteeApplications")
                        .HasForeignKey("MenteePlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "User")
                        .WithMany("MenteeApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenteePlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteeApplicationAnswer", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.MenteeApplication", "MenteeApplication")
                        .WithMany("MenteeApplicationAnswers")
                        .HasForeignKey("MenteeApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.ApplicationQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenteeApplication");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteePlan", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentor")
                        .WithOne("MenteePlans")
                        .HasForeignKey("TorTee.Core.Domains.Entities.MenteePlan", "MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MentorApplication", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Message", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Receiver")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Notification", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Session", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.User", "Mentor")
                        .WithOne("Sessions")
                        .HasForeignKey("TorTee.Core.Domains.Entities.Session", "MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Transaction", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.MenteeApplication", "MenteeApplication")
                        .WithOne("Transaction")
                        .HasForeignKey("TorTee.Core.Domains.Entities.Transaction", "MenteeApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenteeApplication");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.UserRole", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.UserSkill", b =>
                {
                    b.HasOne("TorTee.Core.Domains.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorTee.Core.Domains.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.ApplicationQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Assignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteeApplication", b =>
                {
                    b.Navigation("MenteeApplicationAnswers");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.MenteePlan", b =>
                {
                    b.Navigation("MenteeApplications");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Session", b =>
                {
                    b.Navigation("BookingCalls");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.Skill", b =>
                {
                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("TorTee.Core.Domains.Entities.User", b =>
                {
                    b.Navigation("AssignmentsGiven");

                    b.Navigation("AssignmentsReceived");

                    b.Navigation("BookingCallAsMentee");

                    b.Navigation("FeedbacksGiven");

                    b.Navigation("FeedbacksReceived");

                    b.Navigation("MenteeApplications");

                    b.Navigation("MenteePlans");

                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("Notifications");

                    b.Navigation("Sessions");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
